{"version":3,"file":"generateDocs.cjs","names":["_decamelize","_interopRequireDefault","require","_fs","_gitdown","_glob","_path","e","__esModule","default","_interopRequireWildcard","t","WeakMap","r","n","o","i","f","__proto__","has","get","set","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","dirname","__dirname","trimCode","code","lines","replace","trimEnd","split","firsLineIndentation","match","lastLineIndentation","length","firstIndentSize","lastIndentSize","map","line","index","lineIndentSize","Math","min","slice","join","replaceAll","formatCodeSnippet","setup","ruleName","paragraphs","push","settings","JSON","stringify","options","errors","message","getAssertions","assertionFiles","glob","path","resolve","filter","file","includes","toReversed","assertionNames","filePath","basename","assertionCodes","Promise","all","idx","codes","specifier","then","s","decamelize","separator","invalid","ignoreReadme","valid","assertions","fromEntries","assertionName","getSomeBranch","gitConfig","fs","readFileSync","toString","branch","exec","extraFiles","otherPaths","extraFile","generateDocs","docContents","docPath","gitdown","Gitdown","readFile","setConfig","gitinfo","defaultBranchName","gitPath","docContent","_assertionsBlock","passingFailing","ruleAssertions","Error","getDocPaths","basePath","writeBasePath","docPaths","readdirSync","flatMap","docFile","innerBasePath","writeInnerBasePath","stat","statSync","isFile","isDirectory","innerDocFile","sort","a","b","newA","newB","Boolean","generateDocsAndWriteToDisk","entries","destPath","writeFileSync","assertDocsAreUpToDate","isUpToDate","main","hasCheckFlag","process","argv","error","console","exit","_default","exports","module"],"sources":["../src/bin/generateDocs.js"],"sourcesContent":["import decamelize from 'decamelize';\nimport fs from 'fs';\nimport Gitdown from 'gitdown';\nimport {\n  glob,\n} from 'glob';\n/**\n * This script is used to inline assertions into the README.md documents.\n */\nimport path from 'path';\n\nconst dirname = import.meta.dirname;\n\n/**\n * @param {string} code\n * @returns {string}\n */\nconst trimCode = (code) => {\n  let lines = code.replace(/^\\n/v, '').trimEnd().split('\\n');\n\n  const firsLineIndentation = lines[0].match(/^\\s+/v);\n  const lastLineIndentation = lines[lines.length - 1].match(/^\\s+/v);\n\n  const firstIndentSize = firsLineIndentation ? firsLineIndentation[0].length : 0;\n  const lastIndentSize = lastLineIndentation ? lastLineIndentation[0].length : 0;\n\n  lines = lines.map((line, index) => {\n    const lineIndentSize = firstIndentSize !== 0 || index === 0 ?\n      Math.min(firstIndentSize, lastIndentSize) :\n      lastIndentSize;\n\n    return line.slice(lineIndentSize);\n  });\n\n  return lines.join('\\n').replaceAll('\\r', '\\\\r');\n};\n\n/**\n * @param {import('eslint').RuleTester.InvalidTestCase|import('eslint').RuleTester.ValidTestCase} setup\n * @param {string} ruleName\n * @returns {string}\n */\nconst formatCodeSnippet = (setup, ruleName) => {\n  const paragraphs = [];\n\n  paragraphs.push(trimCode(setup.code));\n\n  if (setup.settings) {\n    paragraphs.push(`// Settings: ${JSON.stringify(setup.settings)}`);\n  }\n\n  if (setup.options) {\n    paragraphs.push(`// \"jsdoc/${ruleName}\": [\"error\"|\"warn\", ${JSON.stringify(setup.options).slice(1)}`);\n  }\n\n  if ('errors' in setup) {\n    paragraphs.push(`// Message: ${\n      /** @type {Array<import('eslint').RuleTester.TestCaseError>} */ (\n        setup.errors\n      )[0].message}`);\n  }\n\n  return paragraphs.join('\\n');\n};\n\nconst getAssertions = async () => {\n  const assertionFiles = (await glob(path.resolve(dirname, '../../test/rules/assertions/*.js'))).filter((file) => {\n    return !file.includes('flatConfig');\n  }).toReversed();\n\n  const assertionNames = assertionFiles.map((filePath) => {\n    return path.basename(filePath, '.js');\n  });\n\n  const assertionCodes = await Promise.all(assertionFiles.map(async (filePath, idx) => {\n    /**\n     * @type {{\n     *   invalid: (import('eslint').RuleTester.InvalidTestCase & {ignoreReadme?: true})[],\n     *   valid: (import('eslint').RuleTester.ValidTestCase & {ignoreReadme?: true})[]\n     * }}\n     */\n    const codes = (await import(filePath)).default;\n\n    const ruleName = decamelize(assertionNames[idx], {\n      separator: '-',\n    });\n\n    return {\n      invalid: codes.invalid.filter(({\n        ignoreReadme,\n      }) => {\n        return !ignoreReadme;\n      }).map((setup) => {\n        return formatCodeSnippet(setup, ruleName);\n      }),\n      valid: codes.valid.filter(({\n        ignoreReadme,\n      }) => {\n        return !ignoreReadme;\n      }).map((setup) => {\n        return formatCodeSnippet(setup, ruleName);\n      }),\n    };\n  }));\n\n  return {\n    assertionNames,\n    assertions: Object.fromEntries(assertionNames.map((assertionName, index) => {\n      return [\n        assertionName, assertionCodes[index],\n      ];\n    })),\n  };\n};\n\nconst getSomeBranch = () => {\n  const gitConfig = fs.readFileSync(path.join(dirname, '../../.git/config')).toString();\n  const [\n    , branch,\n  ] = /\\[branch \"([^\"]+)\"\\]/v.exec(gitConfig) || [];\n\n  return branch;\n};\n\n// Scan the directory for these instead?\nconst extraFiles = [\n  'settings.md',\n  'advanced.md',\n  'processors.md',\n  'README.md',\n];\n\nconst otherPaths = extraFiles.map((extraFile) => {\n  return path.join(dirname, '..', '..', '.README', extraFile);\n});\n\nconst generateDocs = async () => {\n  const {\n    assertionNames,\n    assertions,\n  } = await getAssertions();\n\n  const docContents = await Promise.all([\n    ...assertionNames.map((assertionName) => {\n      return path.join(\n        dirname, '..', '..', '.README', 'rules', decamelize(assertionName, {\n          separator: '-',\n        }) + '.md',\n      );\n    }),\n    ...otherPaths,\n  ].map(async (docPath) => {\n    const gitdown = await Gitdown.readFile(docPath);\n\n    gitdown.setConfig({\n      gitinfo: {\n        defaultBranchName: getSomeBranch() || 'master',\n        gitPath: path.join(dirname, '../../.git'),\n      },\n    });\n\n    return gitdown.get();\n  }));\n\n  return docContents.map((docContent) => {\n    return docContent.replaceAll(\n      /<!-- assertions-(passing|failing) ([a-z]+?) -->/gvi,\n      /**\n       * @param {string} _assertionsBlock\n       * @param {string} passingFailing\n       * @param {string} ruleName\n       * @returns {string}\n       */\n      (_assertionsBlock, passingFailing, ruleName) => {\n        const ruleAssertions = assertions[ruleName];\n\n        if (!ruleAssertions) {\n          throw new Error(`No assertions available for rule \"${ruleName}\".`);\n        }\n\n        return passingFailing === 'failing' ?\n          'The following patterns are considered problems:\\n\\n````ts\\n' +\n            ruleAssertions.invalid.join('\\n\\n') + '\\n````\\n\\n' :\n          'The following patterns are not considered problems:\\n\\n````ts\\n' +\n            ruleAssertions.valid.join('\\n\\n') + '\\n````\\n';\n      },\n    // Allow relative paths in source for #902 but generate compiled file in\n    //   manner compatible with GitHub and npmjs.com\n    ).replaceAll('(../#', '(#user-content-eslint-plugin-jsdoc-');\n  });\n};\n\n/**\n * @returns {string[]}\n */\nconst getDocPaths = () => {\n  const basePath = path.join(dirname, '..', '..', '.README');\n  const writeBasePath = path.join(dirname, '..', '..', 'docs');\n  const docPaths = /** @type {string[]} */ (fs.readdirSync(basePath).flatMap((docFile) => {\n    if (extraFiles.includes(docFile)) {\n      // Will get path separately below\n      return null;\n    }\n\n    if (docFile === '.DS_Store') {\n      return null;\n    }\n\n    const innerBasePath = path.join(basePath, docFile);\n    const writeInnerBasePath = path.join(writeBasePath, docFile);\n    const stat = fs.statSync(innerBasePath);\n    if (stat.isFile()) {\n      // Currently settings and advanced\n      return writeInnerBasePath;\n    }\n\n    if (stat.isDirectory()) {\n      return fs.readdirSync(innerBasePath).map((innerDocFile) => {\n        return path.join(writeInnerBasePath, innerDocFile);\n      }).sort((a, b) => {\n        const newA = a.replace(/\\.md/v, '');\n        const newB = b.replace(/\\.md/v, '');\n        return newA < newB ? -1 : (newB > newA ? 1 : 0);\n      });\n    }\n\n    return null;\n  }).filter(Boolean));\n\n  return [\n    ...docPaths,\n    ...extraFiles.slice(0, -1).map((extraFile) => {\n      return path.join(dirname, '..', '..', 'docs', extraFile);\n    }),\n    path.join(dirname, '..', '..', 'README.md'),\n  ];\n};\n\nconst generateDocsAndWriteToDisk = async () => {\n  const [\n    docContents,\n    docPaths,\n  ] = await Promise.all([\n    generateDocs(), getDocPaths(),\n  ]);\n  for (const [\n    idx,\n    docContent,\n  ] of docContents.entries()) {\n    const destPath = docPaths[idx];\n    fs.writeFileSync(destPath, docContent);\n  }\n};\n\nconst assertDocsAreUpToDate = async () => {\n  const [\n    docContents,\n    docPaths,\n  ] = await Promise.all([\n    generateDocs(), getDocPaths(),\n  ]);\n  for (const [\n    idx,\n    docContent,\n  ] of docContents.entries()) {\n    const docPath = docPaths[idx];\n    const isUpToDate = fs.readFileSync(docPath, 'utf8') === docContent;\n\n    if (!isUpToDate) {\n      throw new Error('Docs are not up to date, please run `pnpm run create-docs` to update it.');\n    }\n  }\n};\n\nconst main = async () => {\n  try {\n    const hasCheckFlag = process.argv.includes('--check');\n\n    if (hasCheckFlag) {\n      await assertDocsAreUpToDate();\n    } else {\n      await generateDocsAndWriteToDisk();\n    }\n  } catch (error) {\n    /* eslint-disable-next-line no-console */\n    console.error(error);\n\n    process.exit(1);\n  }\n};\n\nmain();\n\nexport default generateDocs;\n"],"mappings":";;;;;;AAAA,IAAAA,WAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,GAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,QAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,KAAA,GAAAH,OAAA;AAMA,IAAAI,KAAA,GAAAL,sBAAA,CAAAC,OAAA;AAAwB,SAAAD,uBAAAM,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAAA,SAAAG,wBAAAH,CAAA,EAAAI,CAAA,6BAAAC,OAAA,MAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAF,uBAAA,YAAAA,CAAAH,CAAA,EAAAI,CAAA,SAAAA,CAAA,IAAAJ,CAAA,IAAAA,CAAA,CAAAC,UAAA,SAAAD,CAAA,MAAAQ,CAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAC,SAAA,QAAAT,OAAA,EAAAF,CAAA,iBAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,SAAAU,CAAA,MAAAF,CAAA,GAAAJ,CAAA,GAAAG,CAAA,GAAAD,CAAA,QAAAE,CAAA,CAAAI,GAAA,CAAAZ,CAAA,UAAAQ,CAAA,CAAAK,GAAA,CAAAb,CAAA,GAAAQ,CAAA,CAAAM,GAAA,CAAAd,CAAA,EAAAU,CAAA,gBAAAN,CAAA,IAAAJ,CAAA,gBAAAI,CAAA,OAAAW,cAAA,CAAAC,IAAA,CAAAhB,CAAA,EAAAI,CAAA,OAAAK,CAAA,IAAAD,CAAA,GAAAS,MAAA,CAAAC,cAAA,KAAAD,MAAA,CAAAE,wBAAA,CAAAnB,CAAA,EAAAI,CAAA,OAAAK,CAAA,CAAAI,GAAA,IAAAJ,CAAA,CAAAK,GAAA,IAAAN,CAAA,CAAAE,CAAA,EAAAN,CAAA,EAAAK,CAAA,IAAAC,CAAA,CAAAN,CAAA,IAAAJ,CAAA,CAAAI,CAAA,WAAAM,CAAA,KAAAV,CAAA,EAAAI,CAAA,KAHxB;AACA;AACA;AAGA,MAAMgB,OAAO,GAAAC,SAAsB;;AAEnC;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAIC,IAAI,IAAK;EACzB,IAAIC,KAAK,GAAGD,IAAI,CAACE,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAACC,OAAO,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC;EAE1D,MAAMC,mBAAmB,GAAGJ,KAAK,CAAC,CAAC,CAAC,CAACK,KAAK,CAAC,OAAO,CAAC;EACnD,MAAMC,mBAAmB,GAAGN,KAAK,CAACA,KAAK,CAACO,MAAM,GAAG,CAAC,CAAC,CAACF,KAAK,CAAC,OAAO,CAAC;EAElE,MAAMG,eAAe,GAAGJ,mBAAmB,GAAGA,mBAAmB,CAAC,CAAC,CAAC,CAACG,MAAM,GAAG,CAAC;EAC/E,MAAME,cAAc,GAAGH,mBAAmB,GAAGA,mBAAmB,CAAC,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC;EAE9EP,KAAK,GAAGA,KAAK,CAACU,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IACjC,MAAMC,cAAc,GAAGL,eAAe,KAAK,CAAC,IAAII,KAAK,KAAK,CAAC,GACzDE,IAAI,CAACC,GAAG,CAACP,eAAe,EAAEC,cAAc,CAAC,GACzCA,cAAc;IAEhB,OAAOE,IAAI,CAACK,KAAK,CAACH,cAAc,CAAC;EACnC,CAAC,CAAC;EAEF,OAAOb,KAAK,CAACiB,IAAI,CAAC,IAAI,CAAC,CAACC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC;AACjD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC7C,MAAMC,UAAU,GAAG,EAAE;EAErBA,UAAU,CAACC,IAAI,CAACzB,QAAQ,CAACsB,KAAK,CAACrB,IAAI,CAAC,CAAC;EAErC,IAAIqB,KAAK,CAACI,QAAQ,EAAE;IAClBF,UAAU,CAACC,IAAI,CAAC,gBAAgBE,IAAI,CAACC,SAAS,CAACN,KAAK,CAACI,QAAQ,CAAC,EAAE,CAAC;EACnE;EAEA,IAAIJ,KAAK,CAACO,OAAO,EAAE;IACjBL,UAAU,CAACC,IAAI,CAAC,aAAaF,QAAQ,uBAAuBI,IAAI,CAACC,SAAS,CAACN,KAAK,CAACO,OAAO,CAAC,CAACX,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;EACvG;EAEA,IAAI,QAAQ,IAAII,KAAK,EAAE;IACrBE,UAAU,CAACC,IAAI,CAAC,eACd,+DACEH,KAAK,CAACQ,MAAM,CACZ,CAAC,CAAC,CAACC,OAAO,EAAE,CAAC;EACnB;EAEA,OAAOP,UAAU,CAACL,IAAI,CAAC,IAAI,CAAC;AAC9B,CAAC;AAED,MAAMa,aAAa,GAAG,MAAAA,CAAA,KAAY;EAChC,MAAMC,cAAc,GAAG,CAAC,MAAM,IAAAC,UAAI,EAACC,aAAI,CAACC,OAAO,CAACtC,OAAO,EAAE,kCAAkC,CAAC,CAAC,EAAEuC,MAAM,CAAEC,IAAI,IAAK;IAC9G,OAAO,CAACA,IAAI,CAACC,QAAQ,CAAC,YAAY,CAAC;EACrC,CAAC,CAAC,CAACC,UAAU,CAAC,CAAC;EAEf,MAAMC,cAAc,GAAGR,cAAc,CAACrB,GAAG,CAAE8B,QAAQ,IAAK;IACtD,OAAOP,aAAI,CAACQ,QAAQ,CAACD,QAAQ,EAAE,KAAK,CAAC;EACvC,CAAC,CAAC;EAEF,MAAME,cAAc,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACb,cAAc,CAACrB,GAAG,CAAC,OAAO8B,QAAQ,EAAEK,GAAG,KAAK;IACnF;AACJ;AACA;AACA;AACA;AACA;IACI,MAAMC,KAAK,GAAG,CAAC,OAAAC,SAAA,QAAAJ,OAAA,CAAA7D,CAAA,IAAAA,CAAA,IAAAiE,SAAA,KAAAC,IAAA,CAAAC,CAAA,IAAAtE,uBAAA,CAAAR,OAAA,CAAA8E,CAAA,KAAaT,QAAQ,CAAC,EAAE9D,OAAO;IAE9C,MAAM2C,QAAQ,GAAG,IAAA6B,mBAAU,EAACX,cAAc,CAACM,GAAG,CAAC,EAAE;MAC/CM,SAAS,EAAE;IACb,CAAC,CAAC;IAEF,OAAO;MACLC,OAAO,EAAEN,KAAK,CAACM,OAAO,CAACjB,MAAM,CAAC,CAAC;QAC7BkB;MACF,CAAC,KAAK;QACJ,OAAO,CAACA,YAAY;MACtB,CAAC,CAAC,CAAC3C,GAAG,CAAEU,KAAK,IAAK;QAChB,OAAOD,iBAAiB,CAACC,KAAK,EAAEC,QAAQ,CAAC;MAC3C,CAAC,CAAC;MACFiC,KAAK,EAAER,KAAK,CAACQ,KAAK,CAACnB,MAAM,CAAC,CAAC;QACzBkB;MACF,CAAC,KAAK;QACJ,OAAO,CAACA,YAAY;MACtB,CAAC,CAAC,CAAC3C,GAAG,CAAEU,KAAK,IAAK;QAChB,OAAOD,iBAAiB,CAACC,KAAK,EAAEC,QAAQ,CAAC;MAC3C,CAAC;IACH,CAAC;EACH,CAAC,CAAC,CAAC;EAEH,OAAO;IACLkB,cAAc;IACdgB,UAAU,EAAE9D,MAAM,CAAC+D,WAAW,CAACjB,cAAc,CAAC7B,GAAG,CAAC,CAAC+C,aAAa,EAAE7C,KAAK,KAAK;MAC1E,OAAO,CACL6C,aAAa,EAAEf,cAAc,CAAC9B,KAAK,CAAC,CACrC;IACH,CAAC,CAAC;EACJ,CAAC;AACH,CAAC;AAED,MAAM8C,aAAa,GAAGA,CAAA,KAAM;EAC1B,MAAMC,SAAS,GAAGC,WAAE,CAACC,YAAY,CAAC5B,aAAI,CAAChB,IAAI,CAACrB,OAAO,EAAE,mBAAmB,CAAC,CAAC,CAACkE,QAAQ,CAAC,CAAC;EACrF,MAAM,GACFC,MAAM,CACT,GAAG,uBAAuB,CAACC,IAAI,CAACL,SAAS,CAAC,IAAI,EAAE;EAEjD,OAAOI,MAAM;AACf,CAAC;;AAED;AACA,MAAME,UAAU,GAAG,CACjB,aAAa,EACb,aAAa,EACb,eAAe,EACf,WAAW,CACZ;AAED,MAAMC,UAAU,GAAGD,UAAU,CAACvD,GAAG,CAAEyD,SAAS,IAAK;EAC/C,OAAOlC,aAAI,CAAChB,IAAI,CAACrB,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAEuE,SAAS,CAAC;AAC7D,CAAC,CAAC;AAEF,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC/B,MAAM;IACJ7B,cAAc;IACdgB;EACF,CAAC,GAAG,MAAMzB,aAAa,CAAC,CAAC;EAEzB,MAAMuC,WAAW,GAAG,MAAM1B,OAAO,CAACC,GAAG,CAAC,CACpC,GAAGL,cAAc,CAAC7B,GAAG,CAAE+C,aAAa,IAAK;IACvC,OAAOxB,aAAI,CAAChB,IAAI,CACdrB,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,IAAAsD,mBAAU,EAACO,aAAa,EAAE;MACjEN,SAAS,EAAE;IACb,CAAC,CAAC,GAAG,KACP,CAAC;EACH,CAAC,CAAC,EACF,GAAGe,UAAU,CACd,CAACxD,GAAG,CAAC,MAAO4D,OAAO,IAAK;IACvB,MAAMC,OAAO,GAAG,MAAMC,gBAAO,CAACC,QAAQ,CAACH,OAAO,CAAC;IAE/CC,OAAO,CAACG,SAAS,CAAC;MAChBC,OAAO,EAAE;QACPC,iBAAiB,EAAElB,aAAa,CAAC,CAAC,IAAI,QAAQ;QAC9CmB,OAAO,EAAE5C,aAAI,CAAChB,IAAI,CAACrB,OAAO,EAAE,YAAY;MAC1C;IACF,CAAC,CAAC;IAEF,OAAO2E,OAAO,CAAClF,GAAG,CAAC,CAAC;EACtB,CAAC,CAAC,CAAC;EAEH,OAAOgF,WAAW,CAAC3D,GAAG,CAAEoE,UAAU,IAAK;IACrC,OAAOA,UAAU,CAAC5D,UAAU,CAC1B,oDAAoD;IACpD;AACN;AACA;AACA;AACA;AACA;IACM,CAAC6D,gBAAgB,EAAEC,cAAc,EAAE3D,QAAQ,KAAK;MAC9C,MAAM4D,cAAc,GAAG1B,UAAU,CAAClC,QAAQ,CAAC;MAE3C,IAAI,CAAC4D,cAAc,EAAE;QACnB,MAAM,IAAIC,KAAK,CAAC,qCAAqC7D,QAAQ,IAAI,CAAC;MACpE;MAEA,OAAO2D,cAAc,KAAK,SAAS,GACjC,6DAA6D,GAC3DC,cAAc,CAAC7B,OAAO,CAACnC,IAAI,CAAC,MAAM,CAAC,GAAG,YAAY,GACpD,iEAAiE,GAC/DgE,cAAc,CAAC3B,KAAK,CAACrC,IAAI,CAAC,MAAM,CAAC,GAAG,UAAU;IACpD;IACF;IACA;IACA,CAAC,CAACC,UAAU,CAAC,OAAO,EAAE,qCAAqC,CAAC;EAC9D,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA,MAAMiE,WAAW,GAAGA,CAAA,KAAM;EACxB,MAAMC,QAAQ,GAAGnD,aAAI,CAAChB,IAAI,CAACrB,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,CAAC;EAC1D,MAAMyF,aAAa,GAAGpD,aAAI,CAAChB,IAAI,CAACrB,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC;EAC5D,MAAM0F,QAAQ,GAAG,uBAAyB1B,WAAE,CAAC2B,WAAW,CAACH,QAAQ,CAAC,CAACI,OAAO,CAAEC,OAAO,IAAK;IACtF,IAAIxB,UAAU,CAAC5B,QAAQ,CAACoD,OAAO,CAAC,EAAE;MAChC;MACA,OAAO,IAAI;IACb;IAEA,IAAIA,OAAO,KAAK,WAAW,EAAE;MAC3B,OAAO,IAAI;IACb;IAEA,MAAMC,aAAa,GAAGzD,aAAI,CAAChB,IAAI,CAACmE,QAAQ,EAAEK,OAAO,CAAC;IAClD,MAAME,kBAAkB,GAAG1D,aAAI,CAAChB,IAAI,CAACoE,aAAa,EAAEI,OAAO,CAAC;IAC5D,MAAMG,IAAI,GAAGhC,WAAE,CAACiC,QAAQ,CAACH,aAAa,CAAC;IACvC,IAAIE,IAAI,CAACE,MAAM,CAAC,CAAC,EAAE;MACjB;MACA,OAAOH,kBAAkB;IAC3B;IAEA,IAAIC,IAAI,CAACG,WAAW,CAAC,CAAC,EAAE;MACtB,OAAOnC,WAAE,CAAC2B,WAAW,CAACG,aAAa,CAAC,CAAChF,GAAG,CAAEsF,YAAY,IAAK;QACzD,OAAO/D,aAAI,CAAChB,IAAI,CAAC0E,kBAAkB,EAAEK,YAAY,CAAC;MACpD,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QAChB,MAAMC,IAAI,GAAGF,CAAC,CAACjG,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;QACnC,MAAMoG,IAAI,GAAGF,CAAC,CAAClG,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;QACnC,OAAOmG,IAAI,GAAGC,IAAI,GAAG,CAAC,CAAC,GAAIA,IAAI,GAAGD,IAAI,GAAG,CAAC,GAAG,CAAE;MACjD,CAAC,CAAC;IACJ;IAEA,OAAO,IAAI;EACb,CAAC,CAAC,CAACjE,MAAM,CAACmE,OAAO,CAAE;EAEnB,OAAO,CACL,GAAGhB,QAAQ,EACX,GAAGrB,UAAU,CAACjD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACN,GAAG,CAAEyD,SAAS,IAAK;IAC5C,OAAOlC,aAAI,CAAChB,IAAI,CAACrB,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAEuE,SAAS,CAAC;EAC1D,CAAC,CAAC,EACFlC,aAAI,CAAChB,IAAI,CAACrB,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,CAAC,CAC5C;AACH,CAAC;AAED,MAAM2G,0BAA0B,GAAG,MAAAA,CAAA,KAAY;EAC7C,MAAM,CACJlC,WAAW,EACXiB,QAAQ,CACT,GAAG,MAAM3C,OAAO,CAACC,GAAG,CAAC,CACpBwB,YAAY,CAAC,CAAC,EAAEe,WAAW,CAAC,CAAC,CAC9B,CAAC;EACF,KAAK,MAAM,CACTtC,GAAG,EACHiC,UAAU,CACX,IAAIT,WAAW,CAACmC,OAAO,CAAC,CAAC,EAAE;IAC1B,MAAMC,QAAQ,GAAGnB,QAAQ,CAACzC,GAAG,CAAC;IAC9Be,WAAE,CAAC8C,aAAa,CAACD,QAAQ,EAAE3B,UAAU,CAAC;EACxC;AACF,CAAC;AAED,MAAM6B,qBAAqB,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAM,CACJtC,WAAW,EACXiB,QAAQ,CACT,GAAG,MAAM3C,OAAO,CAACC,GAAG,CAAC,CACpBwB,YAAY,CAAC,CAAC,EAAEe,WAAW,CAAC,CAAC,CAC9B,CAAC;EACF,KAAK,MAAM,CACTtC,GAAG,EACHiC,UAAU,CACX,IAAIT,WAAW,CAACmC,OAAO,CAAC,CAAC,EAAE;IAC1B,MAAMlC,OAAO,GAAGgB,QAAQ,CAACzC,GAAG,CAAC;IAC7B,MAAM+D,UAAU,GAAGhD,WAAE,CAACC,YAAY,CAACS,OAAO,EAAE,MAAM,CAAC,KAAKQ,UAAU;IAElE,IAAI,CAAC8B,UAAU,EAAE;MACf,MAAM,IAAI1B,KAAK,CAAC,0EAA0E,CAAC;IAC7F;EACF;AACF,CAAC;AAED,MAAM2B,IAAI,GAAG,MAAAA,CAAA,KAAY;EACvB,IAAI;IACF,MAAMC,YAAY,GAAGC,OAAO,CAACC,IAAI,CAAC3E,QAAQ,CAAC,SAAS,CAAC;IAErD,IAAIyE,YAAY,EAAE;MAChB,MAAMH,qBAAqB,CAAC,CAAC;IAC/B,CAAC,MAAM;MACL,MAAMJ,0BAA0B,CAAC,CAAC;IACpC;EACF,CAAC,CAAC,OAAOU,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IAEpBF,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC;EACjB;AACF,CAAC;AAEDN,IAAI,CAAC,CAAC;AAAC,IAAAO,QAAA,GAAAC,OAAA,CAAA3I,OAAA,GAEQ0F,YAAY;AAAAkD,MAAA,CAAAD,OAAA,GAAAA,OAAA,CAAA3I,OAAA","ignoreList":[]}