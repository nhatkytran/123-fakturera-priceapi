{"version":3,"file":"requireParam.cjs","names":["_iterateJsdoc","_interopRequireDefault","require","e","__esModule","default","rootNamer","desiredRoots","currentIndex","name","idx","incremented","length","base","suffix","shift","_default","exports","iterateJsdoc","context","jsdoc","node","utils","avoidDocs","hasTag","autoIncrementBase","checkDestructured","checkDestructuredRoots","checkRestProperty","checkTypesPattern","enableFixer","enableRestElementFixer","enableRootFixer","ignoreWhenAllParamsMissing","interfaceExemptsParamsCheck","unnamedRootBase","useDefaultObjectProperties","options","params","type","typeAnnotation","parent","id","preferredTagName","getPreferredTagName","tagName","functionParameterNames","getFunctionParameterNames","jsdocParameterNames","getJsdocTagsDeep","shallowJsdocParameterNames","filter","tag","includes","map","checkTypesRegex","getRegexFromString","missingTags","flattenedRoots","flattenRoots","names","paramIndex","hasParamIndex","cur","dropPathSegmentQuotes","String","getParamIndex","setParamIndex","entries","findExpectedIndex","jsdocTags","indexAtFunctionParams","remainingRoots","slice","foundIndex","findIndex","newAdd","some","remainingRoot","Array","isArray","tags","tagLineCount","source","tokens","end","nextRootName","namer","thisOffset","functionParameterIdx","functionParameterName","inc","matchedJsdoc","rootName","search","hasPropertyRest","hasRestElement","rests","notCheckingNames","paramName","find","fpn","emptyParamIdx","push","remove","fullParamName","notCheckingName","paramType","comparePaths","undefined","startsWith","funcParamName","restElement","fix","createTokens","tagIndex","sourceIndex","spliceCount","number","delimiter","description","lineEnd","postDelimiter","postName","postTag","postType","start","splice","inlineTags","optional","problems","firstNumber","src","offset","expectedIdx","fixer","missingTag","makeMultiline","reportJSDoc","contextDefaults","meta","docs","url","fixable","schema","additionalProperties","properties","checkConstructors","checkGetters","checkSetters","contexts","items","anyOf","comment","exemptedBy","noTracking","module"],"sources":["../../src/rules/requireParam.js"],"sourcesContent":["import iterateJsdoc from '../iterateJsdoc.js';\n\n/**\n * @typedef {[string, boolean, () => RootNamerReturn]} RootNamerReturn\n */\n\n/**\n * @param {string[]} desiredRoots\n * @param {number} currentIndex\n * @returns {RootNamerReturn}\n */\nconst rootNamer = (desiredRoots, currentIndex) => {\n  /** @type {string} */\n  let name;\n  let idx = currentIndex;\n  const incremented = desiredRoots.length <= 1;\n  if (incremented) {\n    const base = desiredRoots[0];\n    const suffix = idx++;\n    name = `${base}${suffix}`;\n  } else {\n    name = /** @type {string} */ (desiredRoots.shift());\n  }\n\n  return [\n    name,\n    incremented,\n    () => {\n      return rootNamer(desiredRoots, idx);\n    },\n  ];\n};\n\n/* eslint-disable complexity -- Temporary */\nexport default iterateJsdoc(({\n  context,\n  jsdoc,\n  node,\n  utils,\n}) => {\n  /* eslint-enable complexity -- Temporary */\n  if (utils.avoidDocs()) {\n    return;\n  }\n\n  // Param type is specified by type in @type\n  if (utils.hasTag('type')) {\n    return;\n  }\n\n  const {\n    autoIncrementBase = 0,\n    checkDestructured = true,\n    checkDestructuredRoots = true,\n    checkRestProperty = false,\n    checkTypesPattern = '/^(?:[oO]bject|[aA]rray|PlainObject|Generic(?:Object|Array))$/',\n    enableFixer = true,\n    enableRestElementFixer = true,\n    enableRootFixer = true,\n    ignoreWhenAllParamsMissing = false,\n    interfaceExemptsParamsCheck = false,\n    unnamedRootBase = [\n      'root',\n    ],\n    useDefaultObjectProperties = false,\n  } = context.options[0] || {};\n\n  if (interfaceExemptsParamsCheck) {\n    if (node && 'params' in node && node.params.length === 1 &&\n        node.params?.[0] && typeof node.params[0] === 'object' &&\n        node.params[0].type === 'ObjectPattern' &&\n        'typeAnnotation' in node.params[0] && node.params[0].typeAnnotation\n    ) {\n      return;\n    }\n\n    if (node && node.parent.type === 'VariableDeclarator' &&\n        'typeAnnotation' in node.parent.id && node.parent.id.typeAnnotation) {\n      return;\n    }\n  }\n\n  const preferredTagName = /** @type {string} */ (utils.getPreferredTagName({\n    tagName: 'param',\n  }));\n  if (!preferredTagName) {\n    return;\n  }\n\n  const functionParameterNames = utils.getFunctionParameterNames(useDefaultObjectProperties);\n  if (!functionParameterNames.length) {\n    return;\n  }\n\n  const jsdocParameterNames =\n    /**\n     * @type {{\n     *   idx: import('../iterateJsdoc.js').Integer;\n     *   name: string;\n     *   type: string;\n     * }[]}\n     */ (utils.getJsdocTagsDeep(preferredTagName));\n\n  if (ignoreWhenAllParamsMissing && !jsdocParameterNames.length) {\n    return;\n  }\n\n  const shallowJsdocParameterNames = jsdocParameterNames.filter((tag) => {\n    return !tag.name.includes('.');\n  }).map((tag, idx) => {\n    return {\n      ...tag,\n      idx,\n    };\n  });\n\n  const checkTypesRegex = utils.getRegexFromString(checkTypesPattern);\n\n  /**\n   * @type {{\n   *   functionParameterIdx: import('../iterateJsdoc.js').Integer,\n   *   functionParameterName: string,\n   *   inc: boolean|undefined,\n   *   remove?: true,\n   *   type?: string|undefined\n   * }[]}\n   */\n  const missingTags = [];\n  const flattenedRoots = utils.flattenRoots(functionParameterNames).names;\n\n  /**\n   * @type {{\n   *   [key: string]: import('../iterateJsdoc.js').Integer\n   * }}\n   */\n  const paramIndex = {};\n\n  /**\n   * @param {string} cur\n   * @returns {boolean}\n   */\n  const hasParamIndex = (cur) => {\n    return utils.dropPathSegmentQuotes(String(cur)) in paramIndex;\n  };\n\n  /**\n   *\n   * @param {string|number|undefined} cur\n   * @returns {import('../iterateJsdoc.js').Integer}\n   */\n  const getParamIndex = (cur) => {\n    return paramIndex[utils.dropPathSegmentQuotes(String(cur))];\n  };\n\n  /**\n   *\n   * @param {string} cur\n   * @param {import('../iterateJsdoc.js').Integer} idx\n   * @returns {void}\n   */\n  const setParamIndex = (cur, idx) => {\n    paramIndex[utils.dropPathSegmentQuotes(String(cur))] = idx;\n  };\n\n  for (const [\n    idx,\n    cur,\n  ] of flattenedRoots.entries()) {\n    setParamIndex(cur, idx);\n  }\n\n  /**\n   *\n   * @param {(import('@es-joy/jsdoccomment').JsdocTagWithInline & {\n   *   newAdd?: boolean\n   * })[]} jsdocTags\n   * @param {import('../iterateJsdoc.js').Integer} indexAtFunctionParams\n   * @returns {import('../iterateJsdoc.js').Integer}\n   */\n  const findExpectedIndex = (jsdocTags, indexAtFunctionParams) => {\n    const remainingRoots = functionParameterNames.slice(indexAtFunctionParams || 0);\n    const foundIndex = jsdocTags.findIndex(({\n      name,\n      newAdd,\n    }) => {\n      return !newAdd && remainingRoots.some((remainingRoot) => {\n        if (Array.isArray(remainingRoot)) {\n          return (\n            /**\n             * @type {import('../jsdocUtils.js').FlattendRootInfo & {\n             *   annotationParamName?: string|undefined;\n             * }}\n             */ (remainingRoot[1]).names.includes(name)\n          );\n        }\n\n        if (typeof remainingRoot === 'object') {\n          return name === remainingRoot.name;\n        }\n\n        return name === remainingRoot;\n      });\n    });\n\n    const tags = foundIndex > -1 ?\n      jsdocTags.slice(0, foundIndex) :\n      jsdocTags.filter(({\n        tag,\n      }) => {\n        return tag === preferredTagName;\n      });\n\n    let tagLineCount = 0;\n    for (const {\n      source,\n    } of tags) {\n      for (const {\n        tokens: {\n          end,\n        },\n      } of source) {\n        if (!end) {\n          tagLineCount++;\n        }\n      }\n    }\n\n    return tagLineCount;\n  };\n\n  let [\n    nextRootName,\n    incremented,\n    namer,\n  ] = rootNamer([\n    ...unnamedRootBase,\n  ], autoIncrementBase);\n\n  const thisOffset = functionParameterNames[0] === 'this' ? 1 : 0;\n\n  for (const [\n    functionParameterIdx,\n    functionParameterName,\n  ] of functionParameterNames.entries()) {\n    let inc;\n    if (Array.isArray(functionParameterName)) {\n      const matchedJsdoc = shallowJsdocParameterNames[functionParameterIdx - thisOffset];\n\n      /** @type {string} */\n      let rootName;\n      if (functionParameterName[0]) {\n        rootName = functionParameterName[0];\n      } else if (matchedJsdoc && matchedJsdoc.name) {\n        rootName = matchedJsdoc.name;\n        if (matchedJsdoc.type && matchedJsdoc.type.search(checkTypesRegex) === -1) {\n          continue;\n        }\n      } else {\n        rootName = nextRootName;\n        inc = incremented;\n      }\n\n      [\n        nextRootName,\n        incremented,\n        namer,\n      ] = namer();\n\n      const {\n        hasPropertyRest,\n        hasRestElement,\n        names,\n        rests,\n      } = /**\n           * @type {import('../jsdocUtils.js').FlattendRootInfo & {\n           *   annotationParamName?: string | undefined;\n           * }}\n           */ (functionParameterName[1]);\n      const notCheckingNames = [];\n      if (!enableRestElementFixer && hasRestElement) {\n        continue;\n      }\n\n      if (!checkDestructuredRoots) {\n        continue;\n      }\n\n      for (const [\n        idx,\n        paramName,\n      ] of names.entries()) {\n        // Add root if the root name is not in the docs (and is not already\n        //  in the tags to be fixed)\n        if (!jsdocParameterNames.find(({\n          name,\n        }) => {\n          return name === rootName;\n        }) && !missingTags.find(({\n          functionParameterName: fpn,\n        }) => {\n          return fpn === rootName;\n        })) {\n          const emptyParamIdx = jsdocParameterNames.findIndex(({\n            name,\n          }) => {\n            return !name;\n          });\n\n          if (emptyParamIdx > -1) {\n            missingTags.push({\n              functionParameterIdx: emptyParamIdx,\n              functionParameterName: rootName,\n              inc,\n              remove: true,\n            });\n          } else {\n            missingTags.push({\n              functionParameterIdx: hasParamIndex(rootName) ?\n                getParamIndex(rootName) :\n                getParamIndex(paramName),\n              functionParameterName: rootName,\n              inc,\n            });\n          }\n        }\n\n        if (!checkDestructured) {\n          continue;\n        }\n\n        if (!checkRestProperty && rests[idx]) {\n          continue;\n        }\n\n        const fullParamName = `${rootName}.${paramName}`;\n\n        const notCheckingName = jsdocParameterNames.find(({\n          name,\n          type: paramType,\n        }) => {\n          return utils.comparePaths(name)(fullParamName) && paramType.search(checkTypesRegex) === -1 && paramType !== '';\n        });\n\n        if (notCheckingName !== undefined) {\n          notCheckingNames.push(notCheckingName.name);\n        }\n\n        if (notCheckingNames.find((name) => {\n          return fullParamName.startsWith(name);\n        })) {\n          continue;\n        }\n\n        if (jsdocParameterNames && !jsdocParameterNames.find(({\n          name,\n        }) => {\n          return utils.comparePaths(name)(fullParamName);\n        })) {\n          missingTags.push({\n            functionParameterIdx: getParamIndex(\n              functionParameterName[0] ? fullParamName : paramName,\n            ),\n            functionParameterName: fullParamName,\n            inc,\n            type: hasRestElement && !hasPropertyRest ? '{...any}' : undefined,\n          });\n        }\n      }\n\n      continue;\n    }\n\n    /** @type {string} */\n    let funcParamName;\n    let type;\n    if (typeof functionParameterName === 'object') {\n      if (!enableRestElementFixer && functionParameterName.restElement) {\n        continue;\n      }\n\n      funcParamName = /** @type {string} */ (functionParameterName.name);\n      type = '{...any}';\n    } else {\n      funcParamName = /** @type {string} */ (functionParameterName);\n    }\n\n    if (jsdocParameterNames && !jsdocParameterNames.find(({\n      name,\n    }) => {\n      return name === funcParamName;\n    }) && funcParamName !== 'this') {\n      missingTags.push({\n        functionParameterIdx: getParamIndex(funcParamName),\n        functionParameterName: funcParamName,\n        inc,\n        type,\n      });\n    }\n  }\n\n  /**\n   *\n   * @param {{\n   *   functionParameterIdx: import('../iterateJsdoc.js').Integer,\n   *   functionParameterName: string,\n   *   remove?: true,\n   *   inc?: boolean,\n   *   type?: string\n   * }} cfg\n   */\n  const fix = ({\n    functionParameterIdx,\n    functionParameterName,\n    inc,\n    remove,\n    type,\n  }) => {\n    if (inc && !enableRootFixer) {\n      return;\n    }\n\n    /**\n     *\n     * @param {import('../iterateJsdoc.js').Integer} tagIndex\n     * @param {import('../iterateJsdoc.js').Integer} sourceIndex\n     * @param {import('../iterateJsdoc.js').Integer} spliceCount\n     * @returns {void}\n     */\n    const createTokens = (tagIndex, sourceIndex, spliceCount) => {\n      // console.log(sourceIndex, tagIndex, jsdoc.tags, jsdoc.source);\n      const tokens = {\n        number: sourceIndex + 1,\n        source: '',\n        tokens: {\n          delimiter: '*',\n          description: '',\n          end: '',\n          lineEnd: '',\n          name: functionParameterName,\n          newAdd: true,\n          postDelimiter: ' ',\n          postName: '',\n          postTag: ' ',\n          postType: type ? ' ' : '',\n          start: jsdoc.source[sourceIndex].tokens.start,\n          tag: `@${preferredTagName}`,\n          type: type ?? '',\n        },\n      };\n\n      /**\n       * @type {(import('@es-joy/jsdoccomment').JsdocTagWithInline & {\n       *   newAdd?: true\n       * })[]}\n       */ (jsdoc.tags).splice(tagIndex, spliceCount, {\n        description: '',\n        inlineTags: [],\n        name: functionParameterName,\n        newAdd: true,\n        optional: false,\n        problems: [],\n        source: [\n          tokens,\n        ],\n        tag: preferredTagName,\n        type: type ?? '',\n      });\n      const firstNumber = jsdoc.source[0].number;\n      jsdoc.source.splice(sourceIndex, spliceCount, tokens);\n      for (const [\n        idx,\n        src,\n      ] of jsdoc.source.slice(sourceIndex).entries()) {\n        src.number = firstNumber + sourceIndex + idx;\n      }\n    };\n\n    const offset = jsdoc.source.findIndex(({\n      tokens: {\n        end,\n        tag,\n      },\n    }) => {\n      return tag || end;\n    });\n    if (remove) {\n      createTokens(functionParameterIdx, offset + functionParameterIdx, 1);\n    } else {\n      const expectedIdx = findExpectedIndex(jsdoc.tags, functionParameterIdx);\n      createTokens(expectedIdx, offset + expectedIdx, 0);\n    }\n  };\n\n  /**\n   * @returns {void}\n   */\n  const fixer = () => {\n    for (const missingTag of missingTags) {\n      fix(missingTag);\n    }\n  };\n\n  if (missingTags.length && jsdoc.source.length === 1) {\n    utils.makeMultiline();\n  }\n\n  for (const {\n    functionParameterName,\n  } of missingTags) {\n    utils.reportJSDoc(\n      `Missing JSDoc @${preferredTagName} \"${functionParameterName}\" declaration.`,\n      null,\n      enableFixer ? fixer : null,\n    );\n  }\n}, {\n  contextDefaults: true,\n  meta: {\n    docs: {\n      description: 'Requires that all function parameters are documented.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-param.md#repos-sticky-header',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          autoIncrementBase: {\n            default: 0,\n            type: 'integer',\n          },\n          checkConstructors: {\n            default: true,\n            type: 'boolean',\n          },\n          checkDestructured: {\n            default: true,\n            type: 'boolean',\n          },\n          checkDestructuredRoots: {\n            default: true,\n            type: 'boolean',\n          },\n          checkGetters: {\n            default: false,\n            type: 'boolean',\n          },\n          checkRestProperty: {\n            default: false,\n            type: 'boolean',\n          },\n          checkSetters: {\n            default: false,\n            type: 'boolean',\n          },\n          checkTypesPattern: {\n            type: 'string',\n          },\n          contexts: {\n            items: {\n              anyOf: [\n                {\n                  type: 'string',\n                },\n                {\n                  additionalProperties: false,\n                  properties: {\n                    comment: {\n                      type: 'string',\n                    },\n                    context: {\n                      type: 'string',\n                    },\n                  },\n                  type: 'object',\n                },\n              ],\n            },\n            type: 'array',\n          },\n          enableFixer: {\n            type: 'boolean',\n          },\n          enableRestElementFixer: {\n            type: 'boolean',\n          },\n          enableRootFixer: {\n            type: 'boolean',\n          },\n          exemptedBy: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n          ignoreWhenAllParamsMissing: {\n            type: 'boolean',\n          },\n          interfaceExemptsParamsCheck: {\n            type: 'boolean',\n          },\n          unnamedRootBase: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n          useDefaultObjectProperties: {\n            type: 'boolean',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n\n  // We cannot cache comment nodes as the contexts may recur with the\n  //  same comment node but a different JS node, and we may need the different\n  //  JS node to ensure we iterate its context\n  noTracking: true,\n});\n"],"mappings":"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","ignoreList":[]}